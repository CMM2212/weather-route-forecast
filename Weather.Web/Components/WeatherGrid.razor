@using Weather.Web.Models.API
@using Weather.Web.Services
@using Weather.Web.Utilities
@inject WeatherForecastService WeatherForecastService


@if (IsLoading)
{
    <p>Calculating weather...</p>
}
else if (GridData != null)
{
    <table class="table table-bordered table-fixed">
        <thead>
            <tr>
                <th>
                    Departure \ Location
                </th>
                @if (GridData.Count > 0)
                {
                    for (int i = 0; i < GridData[0].Count; i++)
                    {
                        <th>
                            @FormatTripTime(i) <br/>
                            @GridData[0][i].Location.Name
                        </th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @for (int j = 0; j < GridData.Count; j++)
            {
                <tr>
                    <td>
                        @Route.Legs.FirstOrDefault().Time.AddMinutes(j * StartOffsetMinutes).ToString("h:mm tt")<br />
                        Departure
                    </td>
                    @foreach (var forecast in GridData[j])
                    {
                        <td class="grid-cell-@(WeatherType == "Temperature" ? "light" : "dark")" style="@GetCellColor(forecast)" title="@GenerateTitle(forecast)">
                            @((MarkupString)@GetCellContent(forecast))
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public Route Route { get; set; }

    [Parameter]
    public int StartOffsetMinutes {get; set; }

    [Parameter]
    public int IntervalMinutes { get; set; }

    [Parameter]
    public int TotalStartingTimes { get; set; }

    [Parameter]
    public string WeatherType { get; set; }

    private List<List<WeatherForecast>> GridData { get; set; }
    private bool IsLoading = true;


    protected override async Task OnParametersSetAsync()
    {
        Console.WriteLine("OnParametersSetAsync");
        Console.WriteLine(Route);
        if (Route != null)
            await PopulateWeatherGrid();
        ;
    }

    private async Task PopulateWeatherGrid()
    {
        Console.WriteLine("Populating Grade");
        IsLoading = true;
        GridData = new List<List<WeatherForecast>>();
        for (int startOffset = 0;
            startOffset < TotalStartingTimes * StartOffsetMinutes;
            startOffset += StartOffsetMinutes)
        {
            var forecasts = WeatherForecastService.GetWeatherForecastByTimeAndInterval(
                Route, startOffset, IntervalMinutes);
            GridData.Add(forecasts);
        }
        IsLoading = false;
        Console.WriteLine("Populated Grade");
    }

    private string GetCellColor(WeatherForecast forecast)
    {
        if (WeatherType == "Temperature")
            return WeatherUtilities.GetTemperatureColor(forecast.Temperature);
        else if (WeatherType == "Wind")
            return WeatherUtilities.GetWindSpeedColor(forecast.WindSpeed);
        else if (WeatherType == "Precipitation")
            return WeatherUtilities.GetPrecipitationColor(forecast.Precipitation);
        else
            return "background-color: #173249";
    }

    private string GetCellContent(WeatherForecast forecast)
    {
        if (WeatherType == "Temperature")
            return forecast.Temperature.ToString("0") + " °F";
        else if (WeatherType == "Wind")
            return GetWindDirection(forecast.WindDirection) + "<br>" + forecast.WindSpeed.ToString("0") + "mph";
        else if (WeatherType == "Precipitation")
            return forecast.Precipitation.ToString("0.0") + "mm";
        else if (WeatherType == "WeatherIcon")
            return $"<i class=\"wi {WeatherUtilities.GetWeatherIcon(forecast.WeatherCode, forecast.IsDay)}\"></i>";
        else
            return "";
    }

    private string GetWindDirection(double angle)
    {
        angle = angle % 360;

        var icon = angle switch
        {
            >= 337.5 or < 22.5 => "wi-direction-up",
            >= 22.5 and < 67.5 => "wi-direction-up-right",
            >= 67.5 and < 112.5 => "wi-direction-right",
            >= 112.5 and < 157.5 => "wi-direction-down-right",
            >= 157.5 and < 202.5 => "wi-direction-down", 
            >= 202.5 and < 247.5 => "wi-direction-down-left",
            >= 247.5 and < 292.5 => "wi-direction-left",  
            >= 292.5 and < 337.5 => "wi-direction-up-left",
            _ => "wi-na"
        };

        return $"<i class=\"wi wind {icon}\"></i>";
    }

    private string FormatTripTime(int i)
    {
        var time = i * IntervalMinutes;
        var minutes = time % 60;
        var hours = time / 60;
        if (minutes == 0)
            return $"{hours} hr";
        else if (hours == 0)
            return $"{minutes} min";
        else
            return $"{hours} hr {minutes} min";
    }

    private string GenerateTitle(WeatherForecast forecast)
    {
        return $"Time: {forecast.Time.ToString("h:mm tt")}\n" +
               $"Location: {forecast.Location.Name}\n" +
                $"Temperature: {forecast.Temperature}°F\n" +
               $"Wind Speed: {forecast.WindSpeed}mph\n" +
               $"Precipitation: {forecast.Precipitation}mm\n";
    }
}
