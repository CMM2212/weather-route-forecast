@page "/"
@using Weather.Web.Models
@using Weather.Web.Services
@using Weather.Web.Models.API
@inject HttpClient Http
@inject WeatherForecastService WeatherForecastService

<PageTitle>Weather Route Planner</PageTitle>

<h1>Weather Route Forecaster</h1>

<div class="mb-3">
    <div class="input-group mb-2">
        <input type="text" class="form-control" @bind="fromAddress" placeholder="From Address" aria-label="From Address" aria-describedby="from-addon">
    </div>
    <div class="input-group mb-2">
        <input type="text" class="form-control" @bind="toAddress" placeholder="To Address" aria-label="To Address" aria-describedby="to-addon">
    </div>
    <button class="btn btn-primary" @onclick="GetRouteAndWeather">Get Weather</button>
</div>

@if (route != null)
{
    <div class="mt-3">
        <h3 class="text-secondary">Route Summary</h3>
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Time</th>
                    <th>Location</th>
                    <th>Temperature (°F)</th>
                    <th>Precipitation (in)</th>
                    <th>Wind Speed (mph)</th>
                    <th>Feels Like (°F)</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Time.ToString("HH:mm")</td>
                    <td>@forecast.Location.Name</td>
                    <td>@forecast.Temperature.ToString("0.0")°F</td>
                    <td>@forecast.Precipitation.ToString("0.0") in</td>
                    <td>@forecast.WindSpeed.ToString("0.0") mph</td>
                    <td>@forecast.ApparentTemperature.ToString("0.0")°F</td>
                </tr>
            }
            </tbody>
        </table>
    </div>    
}
else
{
    <p>Enter addresses and click "Get Weather" to see the forecast.</p>
}



@code {

    private string fromAddress;
    private string toAddress;
    private Route route;
    private List<WeatherForecast> forecasts;

    private async Task GetRouteAndWeather()
    {
        route = await WeatherForecastService.GetWeatherForecastAsync(fromAddress, toAddress);
        forecasts = WeatherForecastService.GetWeatherForecastByTimeAndInterval(route, 0, 15);
    }


}