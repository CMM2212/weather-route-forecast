@page "/"
@using Weather.Web.Models
@using Weather.Web.Services
@using Weather.Web.Models.API
@inject HttpClient Http
@inject WeatherForecastService WeatherForecastService

<PageTitle>Weather Route Planner</PageTitle>

<h1>Weather Route Forecaster</h1>

<div class="mb-3">
    <div class="input-group mb-2">
        <input type="text" class="form-control" @bind="fromAddress" placeholder="From Address" aria-label="From Address" aria-describedby="from-addon">
    </div>
    <div class="input-group mb-2">
        <input type="text" class="form-control" @bind="toAddress" placeholder="To Address" aria-label="To Address" aria-describedby="to-addon">
    </div>
    <button class="btn btn-primary" @onclick="GetRouteAndWeather">Get Weather</button>
</div>

@if (route != null)
{
    <div class="mt-3">
        <h3 class="text-secondary">Route Summary</h3>
        <table class="table table-striped table-hover">
            <thead class="thead-dark">
                <tr>
                    <th>Time</th>
                    <th>Location</th>
                    <th>Temperature (°F)</th>
                    <th>Precipitation (in)</th>
                    <th>Wind Speed (mph)</th>
                    <th>Feels Like (°F)</th>
                </tr>
            </thead>
            <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Time.ToString("HH:mm")</td>
                    <td>@forecast.Location.Name</td>
                    <td>@forecast.Temperature.ToString("0.0")°F</td>
                    <td>@forecast.Precipitation.ToString("0.0") in</td>
                    <td>@forecast.WindSpeed.ToString("0.0") mph</td>
                    <td>@forecast.ApparentTemperature.ToString("0.0")°F</td>
                </tr>
            }
            </tbody>
        </table>
    </div>    
}
else
{
    <p>Enter addresses and click "Get Weather" to see the forecast.</p>
}

@if (gridData != null)
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Start Time Offset</th>
                @if (gridData.Count > 0)
                {
                    for (int i = 0; i < gridData[0].Count; i++) // Assumes all rows will have the same number of columns
                    {
                        <th>@(i * intervalMinutes) min into trip</th>
                    }
                }
            </tr>
        </thead>
        <tbody>
            @for (int j = 0; j < gridData.Count; j++)
            {
                <tr>
                    <td>@(j * startOffsetInterval) min from now</td>
                    @foreach (var forecast in gridData[j])
                    {
                        <td style="@GetPrecipitationColor(forecast.WeatherCode)" title="Temp: @forecast.Temperature°F, Rain: @forecast.Precipitation in">
                            
                        </td>
                    }
                </tr>
            }
        </tbody>
    </table>
}



@code {

    private string fromAddress;
    private string toAddress;
    private Route route;
    private List<WeatherForecast> forecasts;


    List<List<WeatherForecast>> gridData = new List<List<WeatherForecast>>();
    int totalDurationMinutes = 120;
    int intervalMinutes = 15;
    int totalStartingTimes = 10;
    int startOffsetInterval = 30;


    private async Task GetRouteAndWeather()
    {
        route = await WeatherForecastService.GetWeatherForecastAsync(fromAddress, toAddress);
        forecasts = WeatherForecastService.GetWeatherForecastByTimeAndInterval(route, 0, 15);
        PopulateWeatherGrid();
    }
    private void PopulateWeatherGrid()
    {
        for (int startOffset = 0;
            startOffset < totalStartingTimes * startOffsetInterval;
            startOffset += startOffsetInterval)
        {
            var forecasts = WeatherForecastService.GetWeatherForecastByTimeAndInterval(
                route, startOffset, intervalMinutes);
            gridData.Add(forecasts);
        }
    }

    private string GetTemperatureColor(double temperature)
    {

        double minTemp = 32; 
        double maxTemp = 100; 

        double normalizedTemp = (temperature - minTemp) / (maxTemp - minTemp);

        int r = (int)(255 * normalizedTemp); 
        int b = 255 - r;
        int g = 0; 
        r = Math.Clamp(r, 0, 255);
        b = Math.Clamp(b, 0, 255);

        return $"background-color: rgb({r},{g},{b});";
    }

    private string GetPrecipitationColor(double precipitation)
    {
        double minPrecip = 0;
        double maxPrecip = 0.005;

        double normalizedPrecip = (precipitation - minPrecip) / (maxPrecip - minPrecip);

        int r = 40;
        int b = (int)(255 * normalizedPrecip - 40);
        int g = 255 - b - 100;
        b = Math.Clamp(b, 0, 255);
        g = Math.Clamp(g, 0, 255);

        return $"background-color: rgb({r},{g},{b});";
    }


}