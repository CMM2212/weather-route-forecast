@page "/"
@using Weather.Web.Models
@using Weather.Web.Services
@using Weather.Web.Models.API
@using Weather.Web.Components
@using Weather.Web.Utilities
@inject HttpClient Http
@inject WeatherForecastService WeatherForecastService

<PageTitle>Weather Route Planner</PageTitle>

<h1>Weather Route Forecaster</h1>

<div class="mb-3">
    <AddressInput Placeholder="From Address"
                  Value="@fromAddress"
                  ValueChanged="@(value => fromAddress = value)" />
    <AddressInput Placeholder="To Address"
                  Value="@toAddress"
                  ValueChanged="@(value => toAddress = value)" />
    <button class="btn btn-primary" @onclick="GetRouteAndWeather">Get Weather</button>
    <i class="wi wi-night-sleet"></i>
    @if (isLoading)
    {
        <div class="spinner-border text-success" role="status">
        </div>
    }
</div>

@if (route != null)
{
    <ForecastTable Forecasts="@forecasts" />
    <WeatherGrid Route="@route" TotalStartingTimes="@totalStartingTimes" IntervalMinutes="@intervalMinutes" StartOffsetMinutes="@startOffsetInterval"/>
}
else
{
    <p>Enter addresses and click "Get Weather" to see the forecast.</p>
}



@code {

    private string fromAddress;
    private string toAddress;
    private Route route;
    private List<WeatherForecast> forecasts;

    private bool isLoading;


    List<List<WeatherForecast>> gridData = new List<List<WeatherForecast>>();
    int totalDurationMinutes = 120;
    int intervalMinutes = 15;
    int totalStartingTimes = 10;
    int startOffsetInterval = 30;


    private async Task GetRouteAndWeather()
    {
        isLoading = true;
        Console.WriteLine($"Getting route and weather: {fromAddress} {toAddress}");
        route = await WeatherForecastService.GetWeatherForecastAsync(fromAddress, toAddress);
        forecasts = WeatherForecastService.GetWeatherForecastByTimeAndInterval(route, 0, 15);
        isLoading = false;
    }
}