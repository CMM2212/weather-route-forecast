@page "/"
@using System.Text.Json
@using Weather.Web.Models
@using Weather.Web.Services
@using Weather.Web.Models.API
@using Weather.Web.Components
@using Weather.Web.Utilities
@inject HttpClient Http
@inject WeatherForecastService WeatherForecastService
@inject IJSRuntime JSRuntime

<PageTitle>Weather Route Planner</PageTitle>

<div class="container mt-3">
     <h1 class="mb-3">Dynamic Weather Forecasting</h1>

    <div class="row">
        <div class="col-md-6">
            <AddressInput Placeholder="From Address"
                          Value="@fromAddress"
                          ValueChanged="@(value => fromAddress = value)" />
            <AddressInput Placeholder="To Address"
                          Value="@toAddress"
                          ValueChanged="@(value => toAddress = value)" />
            @if (isLoading)
            {
                <button class="btn btn-primary" type="button" disabled>
                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                    Loading...
                </button>
            }
            else
            {
                <button class="btn btn-primary" @onclick="GetRouteAndWeather">Get Weather</button>
            }
        </div>
    </div>


    
    @if (route != null)
    {
        <div class="row mt-3">
            <div class="col-12">
                <div class="btn-group" role="group" aria-label="View Selector">
                    <button class="btn btn-secondary @(currentView == "table" ? "active" : "")" @onclick="@(() => currentView = "table")">Forecast Table</button>
                    <button class="btn btn-secondary @(currentView == "grid" ? "active" : "")" @onclick="@(() => currentView = "grid")">Weather Grid</button>
                    <button class="btn btn-secondary @(currentView == "map" ? "active" : "")" @onclick="@(() => ShowMap())">Map</button>
                </div>
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-12">
                @if (currentView == "table")
                {
                    <ForecastTable Forecasts="@forecasts" />
                }
                else if (currentView == "grid")
                {
                    <WeatherGrid Route="@route" TotalStartingTimes="@totalStartingTimes" IntervalMinutes="@intervalMinutes" StartOffsetMinutes="@startOffsetInterval" />
                }
                else if (currentView == "map")
                {
                    <div id="map" style="height: 400px;">My </div>
                }
            </div>
        </div>
    }
    else
    {
        <p>Enter addresses and click "Get Weather" to see the forecast.</p>
    }
</div>



@code {

    private string fromAddress;
    private string toAddress;
    private Route route;
    private List<WeatherForecast> forecasts;
    private string currentView = "table";

    private bool isLoading;
    private bool mapLoaded;


    List<List<WeatherForecast>> gridData = new List<List<WeatherForecast>>();
    int totalDurationMinutes = 120;
    int intervalMinutes = 15;
    int totalStartingTimes = 10;
    int startOffsetInterval = 30;

    private void ShowMap()
    {
        currentView = "map";
    }

    private void UpdateMap()
    {
        if (route != null)
        {
            Console.WriteLine("Actually updating map");
            var routeJson = JsonSerializer.Serialize(new
            {
                start = route.Start,
                end = route.End,
                legs = route.Legs.Select(leg => new
                {
                    start = leg.Start,
                    time = leg.Time.ToString("h:mm tt"),
                    weather = new
                    {
                        icon = WeatherUtilities.GetWeatherIcon(leg.Forecasts.FirstOrDefault()?.WeatherCode ?? 0, leg.Forecasts.FirstOrDefault()?.IsDay ?? false),
                        summary = "Summary here",
                        temperature = leg.Forecasts.FirstOrDefault()?.Temperature ?? 0,
                        windSpeed = leg.Forecasts.FirstOrDefault()?.WindSpeed ?? 0,
                    }
                })
            });

            JSRuntime.InvokeVoidAsync("initializeMap", routeJson);
        }
    }


    private async Task GetRouteAndWeather()
    {
        isLoading = true;
        route = await WeatherForecastService.GetWeatherForecastAsync(fromAddress, toAddress);
        forecasts = WeatherForecastService.GetWeatherForecastByTimeAndInterval(route, 0, 15);
        isLoading = false;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        UpdateMap();
    }
}