@page "/"
@using Weather.Web.Models
@using Weather.Web.Services
@using Weather.Web.Models.API
@inject HttpClient Http
@inject WeatherForecastService WeatherForecastService

<PageTitle>Weather Route Planner</PageTitle>

<h1>Weather/Route Demo</h1>

<div>
    <input type="text" @bind="fromAddress" placeholder="From Address" />
    <input type="text" @bind="toAddress" placeholder="To Address" />
    <button @onclick="GetRouteAndWeather">Get Weather</button>
</div>

@if (route != null)
{
    <div>
        <p>Route Summary:</p>
    </div>

    @foreach (var forecast in forecasts)
    {
        <div>
            <p>Forecast Time: @forecast.Time</p>
            <p>Forecast Location: @forecast.Location.Name</p>
            <p>Forecast Temperature: @forecast.Temperature</p>
            <p>Forecast Precipitation: @forecast.Precipitation</p>
        </div>
    }
}
else
{
    <p>Enter addresses and click "Get Weather" to see the forecast.</p>
}



@code {

    private string fromAddress;
    private string toAddress;
    private Route route;
    private List<WeatherForecast> forecasts;

    private async Task GetRouteAndWeather()
    {
        route = await WeatherForecastService.GetWeatherForecastAsync(fromAddress, toAddress);
        forecasts = WeatherForecastService.GetWeatherForecastByTimeAndInterval(route, 0, 15);
    }
    // string? result;
    // UserRouteModel userRouteModel = new UserRouteModel();

    // private async Task Submit()
    // {
    //     var apiUrl = $"http:localhost:7071/api/weather/" +
    //                  $"{userRouteModel.StartLatitude},{userRouteModel.StartLongitude}/" +
    //                  $"{userRouteModel.EndLatitude},{userRouteModel.EndLongitude}";

    //     Call the API
    //     result = await Http.GetStringAsync(apiUrl);
    // }

}